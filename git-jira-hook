#!/usr/bin/env python

# Copyright 2009 Broadcom Corporation
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
#      http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License. 

# File: git-jira-hook
# Author: Joyjit Nath
#
# Inspired by:
#   http://github.com/dreiss/git-jira-attacher/tree/master
#   http://confluence.atlassian.com/display/JIRAEXT/Jira+CLI
#


# Purpose:
# This is a git hook, to be used in an environment wher git is used
# as the source control and Jira is used for bug tracking.
# 
# See README file for help in using this
# 



from __future__ import with_statement

import sys
import contextlib
import os
import subprocess
import re
import collections
import getpass
import SOAPpy
import traceback
import pprint
import pdb
import logging
import stat
import cookielib
import subprocess
import urllib2

import ConfigParser



def get_cfg_value(cfg_file_name, section, key):
    try:
        cfg = ConfigParser.ConfigParser()
        cfg.read(cfg_file_name)
        value = cfg.get(section, key)
    except:
        return None
    return value
    

def save_cfg_value(cfg_file_name, section, key, value):
    
    try:
        cfg = ConfigParser.SafeConfigParser()
    except Exception, e:
        logging.warning("Failed to instantiate a ConfigParser object")
        logging.exception(e)
        return

    try:
        cfg.read(cfg_file_name)
    except Exception, e:
        logging.warning("Failed to read .jirarc")
        logging.exception(e)
        return

    try:
        cfg.add_section(section)
    except ConfigParser.DuplicateSectionError,e:
        logging.debug("Section '%s' already exists in '%s'", section, cfg_file_name)

    try:
        cfg.set(section, key, value)
    except Exception,e:
        logging.warning("Failed to add '%s' to '%s'", key, cfg_file_name)
        logging.exception(e)

    try:
        cfg.write(open(cfg_file_name, 'wb'))
    except Exception, e:
        logging.warning("Failed to write '%s'='%s' to file %s", key, value, cfg_file_name)
        logging.exception(e)
        return


def get_jira_cached_auth(jira_url):
    return get_cfg_value(os.environ['HOME'] + "/.jirarc", jira_url, "auth")

def save_jira_cached_auth(jira_url, auth):
    return save_cfg_value(os.environ['HOME'] + "/.jirarc", jira_url, "auth", auth)


def git_config_get(name):
    return get_shell_cmd_output("git config '" + name + "'")

def get_shell_cmd_output(cmd):
    try:
        proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
        return proc.stdout.read().rstrip('\n')
    except KeyboardInterrupt:
        logging.info("... interrupted")

    except Exception, e:
        logging.error("Failed trying to execute '%s'", cmd)
    

def git_config_set(name, value):
    os.system("git config " + name + " '" + value + "'")

def git_config_unset(name):
    os.system("git config --unset-all " + name)

def git_get_commit_msg(commit_id):
    return get_shell_cmd_output("git rev-list --pretty --max-count=1 " + commit_id)

def git_get_last_commit_id():
    return get_shell_cmd_output("git log --pretty=format:%H -1")

def jira_start_session(jira_url):
    jira_url = jira_url.rstrip("/")
    try:
        handle = urllib2.urlopen(jira_url + "/rpc/soap/jirasoapservice-v2?wsdl")
        soap_client = SOAPpy.WSDL.Proxy(handle)
        # print "self.soap_client set", self.soap_client

    except KeyboardInterrupt:
        logging.info("... interrupted")

    except Exception, e:
        save_jira_cached_auth(jira_url, "")
        logging.error("Invalid Jira URL: '%s'", jira_url)
        logging.exception(e)
        return -1

    auth = jira_login(jira_url, soap_client)
    if auth == None:
        return (None, None)

    return (soap_client, auth)

def jira_explicit_login(soap_client):
    max_retry_count = 3
    retry_count = 0

    while retry_count < max_retry_count:
        if retry_count > 0:
            print >> sys.stderr, "Invalid Jira password/username combination, try again"

        # We now need to read the Jira username/password from
        # the console.
        # However, there is a problem. When git hooks are invoked
        # stdin is pointed to /dev/null, see here:
        # http://kerneltrap.org/index.php?q=mailarchive/git/2008/3/4/1062624/thread
        # The work-around is to re-assign stdin back to /dev/tty , as per
        # http://mail.python.org/pipermail/patches/2002-February/007193.html
        sys.stdin = open('/dev/tty', 'r')

        username = raw_input('Jira username: ')
        password = getpass.getpass('Jira password: ')

        # print "abc"
        # print "self.soap_client login...%s " % username + password
        try:
            auth = soap_client.login(username, password) 

            try:
                jira_types = soap_client.getIssueTypes(auth)
                return auth

            except KeyboardInterrupt:
                logging.info("... interrupted")

        except KeyboardInterrupt:
            logging.info("... interrupted")

        auth=None
        retry_count = retry_count + 1


    if auth == None:
        logging.error("Invalid Jira password/username combination")

    return auth

def jira_implicit_login(soap_client, auth):

    # test jira to see if auth is valid
    try:
        jira_types = soap_client.getIssueTypes(auth)
        return auth
    except KeyboardInterrupt:
        logging.info("... interrupted")

    except Exception, e:
        print >> sys.stderr, "Previous Jira login is invalid or has expired"
        # logging.exception(e)
        

    return None

# returns an auth object
def jira_login(jira_url, soap_client):

    auth = get_jira_cached_auth(jira_url)
    if auth != None and auth != "": 
        auth = jira_implicit_login(soap_client, auth) 
    else:
        auth = None

    if auth == None:
        save_jira_cached_auth(jira_url, "")
        auth = jira_explicit_login(soap_client)


    if auth != None:
        save_jira_cached_auth(jira_url, auth)

    return auth


def jira_find_issue(issuekey, jira_soap_client, jira_auth, jira_text):
    try:
        issue = jira_soap_client.getIssue(jira_auth, issuekey)
        logging.info("Found issue '%s' in Jira: (%s)",  
                    issuekey, issue["summary"])
        # print "Found issue '%s' in Jira" % issuekey
        return 0

    except KeyboardInterrupt:
        logging.info("... interrupted")

    except Exception, e:
        logging.error("No such issue '%s' in Jira", issuekey)
        logging.exception(e)
        return -1


def jira_add_comment_to_issue(issuekey, jira_soap_client, jira_auth, jira_text):
    try:
        jira_soap_client.addComment(jira_auth, issuekey, {"body":jira_text})
        logging.info("Added to issue '%s' in Jira:\n%s", issuekey, jira_text)

    except Exception, e:
        logging.error("Error adding comment to issue '%s' in Jira", issuekey)
        logging.exception(e)
        return -1


def jira_add_comment_to_issue_and_close(issuekey, jira_soap_client, jira_text):
    return jira_add_comment_to_issue(issuekey, jira_soap_client, jira_text)



# returns number of issues found and touched
# in case of error, return -1
def call_pattern_hook(text, pattern, hookfn, jira_soap_client, jira_auth, jira_text):
    if not callable(hookfn):
        logging.error("Hook function is not callable");
        exit -1

    magic = re.compile(pattern + ' #\w\w*-\d\d*')
    
    iterator = magic.finditer(text)
    issue_count = 0
    for match in iterator: 
        issuekey = match.group().split(" ", 2)[1].strip('#')
        # print "issuekey found=", issuekey
        ret = hookfn(issuekey, jira_soap_client, jira_auth, jira_text)
        if ret != 0:
            return -1
        else:
            issue_count += 1

    return issue_count


def get_jira_url():
    jira_url = git_config_get("jira.url")
    if jira_url == None or jira_url == "":
        logging.error("Jira URL is not set. Please use 'git config jira.url <actual-jira-url> to set it'")
        return None

    return jira_url

def handle_commit_msg(commit_msg_filename):

    jira_url = get_jira_url()
    if jira_url == None:
        return -1

    try:
        mode = os.stat(commit_msg_filename)[stat.ST_MODE]
        if not stat.S_ISREG(mode):
            logging.error("'%s' is not a valid file", commit_msg_filename)

    except KeyboardInterrupt:
        logging.info('... interrupted')

    except Exception, e:
        logging.error("Failed to open file '%s'", commit_msg_filename)
        logging.exception(e)
        return -1

    (jira_soap_client, jira_auth) = jira_start_session(jira_url)

    try:
        commit_msg_text = open(commit_msg_filename).read()

    except KeyboardInterrupt:
        logging.info('... interrupted')

    except Exception, e:
        logging.error("Failed to open file '%s'", commit_msg_filename)
        logging.exception(e)
        return -1

    refed_issue_count = call_pattern_hook(commit_msg_text, 'refs', \
            jira_find_issue, jira_soap_client, jira_auth, None)

    if refed_issue_count == -1:
        return -1 


    fixed_issue_count = call_pattern_hook(commit_msg_text, 'fixes', \
                jira_find_issue, jira_soap_client, jira_auth, None)

    if fixed_issue_count == -1:
        return -1 


    if refed_issue_count + fixed_issue_count == 0:
        logging.error("Failed to find any referenced Jira issue in commit message")
        return -1

    return 0


def get_gitweb_url():
    return git_config_get("gitweb.url")

def handle_post_commit():
    jira_url = get_jira_url()
    if jira_url == None:
        return -1


    commit_id = git_get_last_commit_id()
    commit_text = git_get_commit_msg(commit_id) 

    (jira_soap_client, jira_auth) = jira_start_session(jira_url)

    gitweb_url = get_gitweb_url()
    if gitweb_url != None or gitweb_url != "":
        commit_text_with_url = commit_text.replace(commit_id, \
            "[" + commit_id + "|" + gitweb_url + commit_id + "]")
    else:
        commit_text_with_url = commit_text


    error = call_pattern_hook(commit_text, 'refs', jira_add_comment_to_issue, \
                                jira_soap_client, jira_auth, commit_text_with_url)
    if error == 0:
        error = call_pattern_hook(commit_text, 'fixes', jira_add_comment_to_and_fix_issue, \
                                jira_soap_client, jira_auth, commit_text_with_url)
    
    return error


def main():
    myname = os.path.basename(sys.argv[0])

    if myname == "commit-msg" :
        if len(sys.argv) < 2 :
            logging.error("No commit message filename specified") 
            return -1
        return handle_commit_msg(sys.argv[1])

    elif myname == "post-commit" :
        return handle_post_commit()

    else:
        logging.error("invoked as '%s'. Need to be invoked as commit-msg or post-commit" , myname)
        return -1
 
    return 0


if __name__ == "__main__":
  exit (main())
    
